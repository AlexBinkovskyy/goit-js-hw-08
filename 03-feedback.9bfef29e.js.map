{"mappings":"AGAA,2DAAA,EAEA;;;;;;;;;;;;;;;;;;;;CAoBA,EFpBA,MAAM,EAAO,SAAS,aAAa,CAAC,kBACpC,EAAK,gBAAgB,CAAC,QAoBtB,SAAoB,CAAK,EACrB,EAAM,cAAc,GACpB,GAAM,CAAE,SAAW,CAAA,MAAC,CAAK,CAAA,QAAE,CAAO,CAAC,CAAC,CAAG,EAAM,aAAa,CAK1D,EAJA,kBAAoB,CAChB,MAAS,EAAM,KAAK,CACpB,QAAW,EAAQ,KAAK,AAC5B,EAEJ,GA3BA,EAAK,gBAAgB,CAAC,SAAU,GAChC,MAAM,EAAY,EAAK,gBAAgB,CACvC,EAAU,gBAAgB,CAAC,SAAU,GAErC,MAAM,EAAc,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,yBAA2B,GACzE,EAAa,EAAK,aAAa,CAAC,kBAChC,EAAe,EAAK,aAAa,CAAC,mBAExC,CAAA,EAAW,KAAK,CAAG,EAAY,KAAK,EAAI,GACxC,EAAa,KAAK,CAAG,EAAY,OAAO,EAAI,GAE5C,MAAM,EAAe,AEQN,SAAUuB,CAAV,CAAiBC,CAAjB,CAA2BC,CAA3B,EAKVA,IAMAC,EANAD,EAAAA,GAAW,CAAA,EAJf,EAAA,EACCI,UADD,CACCA,EADD,AAAA,KAAA,IAAA,GAAA,EAAA,EAAA,EAECE,SAFD,CAECA,EAFD,AAAA,KAAA,IAAA,GAAA,EAAA,EAAA,EAGCE,YAHD,CAGCA,EAHD,AAAA,KAAA,IAAA,EAGgBC,KAAAA,EAHhB,EAWIC,EAAY,CAAA,EAGZC,EAAW,EAGf,SAASC,IACJX,GACHY,aAAaZ,EAEd,CAAA,+BAAA;AASD;;;;GAID,EACC,SAASa,IAAuB,IAAA,IAAA,EAAA,UAAA,MAAA,CAAZI,EAAY,AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAZA,CAAY,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAC3BG,IAAAA,EAAO,IAAX,CACIC,EAAUC,KAAKC,GAAL,GAAab,CAI1B,2DAAA;AAGD,SAASc,IACRd,EAAWY,KAAKC,GAAL,GACXzB,EAAS2B,KAAT,CAAeL,EAAMH,EACrB,CAED;;;KAGF,EACE,SAASS,IACR1B,EAAYQ,KAAAA,CACZ,CAhBGC,IAkBCJ,IAAaE,GAAiBP,GAClC;;;;OAIH,EACGwB,IAGDb,IAEIJ,AAAiBC,KAAAA,IAAjBD,GAA8Bc,EAAUxB,EACvCQ,GACH;;;;SAIJ,EACIK,EAAWY,KAAKC,GAAL,GACNpB,GACJH,CAAAA,EAAY2B,WAAWpB,EAAemB,EAAQF,EAAM3B,EADjD,GAIJ;;;SAGJ,EACI2B,IAEwB,CAAA,IAAfrB,GACV;;;;;;;;;;OAUH,EACGH,CAAAA,EAAY2B,WACXpB,EAAemB,EAAQF,EACvBjB,AAAiBC,KAAAA,IAAjBD,EAA6BV,EAAQwB,EAAUxB,EAHnD,EAME,CAKD,OAHAgB,EAAQe,MAAR,CAjFSA,SAAO7B,CAAhB,EACkCA,IAAjC,EAAA,AAAiCA,CAAAA,GAAW,CAAA,CAAA,EAApCgC,YAAR,CACApB,IACAF,EAAY,CAFZ,CAAA,AAAA,KAAA,IAAA,GAAA,CAAiCV,CAGjC,EAgFMc,CACP,EFrHA,IACA,AAAC,IACA,aAAa,OAAO,CAAC,sBAAuB,KAAK,SAAS,CAAC,mBAC5D,EACA,CAAE,UAAW,CAAA,EAAO,WAAY,CAAA,CAAM,GAavC,SAAS,EAAS,CAAK,EACnB,EAAM,cAAc,GACpB,QAAQ,GAAG,CAAC,SAAU,EAAW,KAAK,EACtC,QAAQ,GAAG,CAAC,WAAY,EAAa,KAAK,EAC1C,EAAK,KAAK,GACV,aAAa,UAAU,CAAC,sBAC5B,C,iE","sources":["<anon>","src/js/03-feedback.js","node_modules/throttle-debounce/esm/index.js","node_modules/throttle-debounce/throttle.js","node_modules/throttle-debounce/debounce.js"],"sourcesContent":["/* eslint-disable no-undefined,no-param-reassign,no-shadow */ /**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */ function $8b2e3fa012f8d6d4$export$de363e709c412c8a(delay, callback, options) {\n    var _ref = options || {}, _ref$noTrailing = _ref.noTrailing, noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing, _ref$noLeading = _ref.noLeading, noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading, _ref$debounceMode = _ref.debounceMode, debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n    /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */ var timeoutID;\n    var cancelled = false; // Keep track of the last time `callback` was executed.\n    var lastExec = 0; // Function to clear existing timeout\n    function clearExistingTimeout() {\n        if (timeoutID) clearTimeout(timeoutID);\n    } // Function to cancel next exec\n    function cancel(options) {\n        var _ref2 = options || {}, _ref2$upcomingOnly = _ref2.upcomingOnly, upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n        clearExistingTimeout();\n        cancelled = !upcomingOnly;\n    }\n    /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */ function wrapper() {\n        for(var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++)arguments_[_key] = arguments[_key];\n        var self = this;\n        var elapsed = Date.now() - lastExec;\n        if (cancelled) return;\n         // Execute `callback` and update the `lastExec` timestamp.\n        function exec() {\n            lastExec = Date.now();\n            callback.apply(self, arguments_);\n        }\n        /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */ function clear() {\n            timeoutID = undefined;\n        }\n        if (!noLeading && debounceMode && !timeoutID) /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`\n       * and noLeading != true.\n       */ exec();\n        clearExistingTimeout();\n        if (debounceMode === undefined && elapsed > delay) {\n            if (noLeading) {\n                /*\n         * In throttle mode with noLeading, if `delay` time has\n         * been exceeded, update `lastExec` and schedule `callback`\n         * to execute after `delay` ms.\n         */ lastExec = Date.now();\n                if (!noTrailing) timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n            } else /*\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n         * `callback`.\n         */ exec();\n        } else if (noTrailing !== true) /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */ timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n    wrapper.cancel = cancel; // Return the wrapper function.\n    return wrapper;\n}\n/* eslint-disable no-undefined */ /**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */ function $8b2e3fa012f8d6d4$export$61fc7d43ac8f84b0(delay, callback, options) {\n    var _ref = options || {}, _ref$atBegin = _ref.atBegin, atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n    return $8b2e3fa012f8d6d4$export$de363e709c412c8a(delay, callback, {\n        debounceMode: atBegin !== false\n    });\n}\n\n\nconst $945622fd0f572e60$var$form = document.querySelector(\".feedback-form\");\n$945622fd0f572e60$var$form.addEventListener(\"input\", $945622fd0f572e60$var$inputValue);\n$945622fd0f572e60$var$form.addEventListener(\"submit\", $945622fd0f572e60$var$onSubmit);\nconst $945622fd0f572e60$var$submitBtn = $945622fd0f572e60$var$form.lastElementChild;\n$945622fd0f572e60$var$submitBtn.addEventListener(\"submit\", $945622fd0f572e60$var$onSubmit);\nconst $945622fd0f572e60$var$checkValues = JSON.parse(localStorage.getItem(\"feedback-form-state\")) ?? \"\";\nconst $945622fd0f572e60$var$emailInput = $945622fd0f572e60$var$form.querySelector('[name=\"email\"]');\nconst $945622fd0f572e60$var$messageInput = $945622fd0f572e60$var$form.querySelector('[name=\"message\"]');\n$945622fd0f572e60$var$emailInput.value = $945622fd0f572e60$var$checkValues.email ?? \"\";\n$945622fd0f572e60$var$messageInput.value = $945622fd0f572e60$var$checkValues.message ?? \"\";\nconst $945622fd0f572e60$var$throttleFunc = (0, $8b2e3fa012f8d6d4$export$de363e709c412c8a)(500, (num)=>{\n    localStorage.setItem(\"feedback-form-state\", JSON.stringify(feedbackFormState));\n}, {\n    noLeading: false,\n    noTrailing: false\n});\nfunction $945622fd0f572e60$var$inputValue(event) {\n    event.preventDefault();\n    const { elements: { email: email, message: message } } = event.currentTarget;\n    feedbackFormState = {\n        \"email\": email.value,\n        \"message\": message.value\n    };\n    $945622fd0f572e60$var$throttleFunc(feedbackFormState);\n}\nfunction $945622fd0f572e60$var$onSubmit(event) {\n    event.preventDefault();\n    console.log(\"email:\", $945622fd0f572e60$var$emailInput.value);\n    console.log(\"message:\", $945622fd0f572e60$var$messageInput.value);\n    $945622fd0f572e60$var$form.reset();\n    localStorage.removeItem(\"feedback-form-state\");\n}\n\n\n//# sourceMappingURL=03-feedback.9bfef29e.js.map\n","import { throttle } from 'throttle-debounce';\n\nconst form = document.querySelector('.feedback-form');\nform.addEventListener('input', inputValue);\nform.addEventListener('submit', onSubmit);\nconst submitBtn = form.lastElementChild;\nsubmitBtn.addEventListener('submit', onSubmit);\n\nconst checkValues = JSON.parse(localStorage.getItem('feedback-form-state')) ?? '';\nconst emailInput = form.querySelector('[name=\"email\"]');\nconst messageInput = form.querySelector('[name=\"message\"]');\n\nemailInput.value = checkValues.email ?? '';\nmessageInput.value = checkValues.message ?? '';\n\nconst throttleFunc = throttle(\n\t500,\n\t(num) => {\n\t\tlocalStorage.setItem('feedback-form-state', JSON.stringify(feedbackFormState));\n\t},\n\t{ noLeading: false, noTrailing: false }\n);\n\nfunction inputValue(event) {\n    event.preventDefault();\n    const { elements : {email, message}} = event.currentTarget;\n    feedbackFormState = {\n        'email': email.value,\n        'message': message.value\n    };\n    throttleFunc(feedbackFormState);\n}\n\nfunction onSubmit(event) {\n    event.preventDefault();\n    console.log('email:', emailInput.value);\n    console.log('message:', messageInput.value);\n    form.reset();\n    localStorage.removeItem('feedback-form-state')\n}\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nfunction throttle (delay, callback, options) {\n  var _ref = options || {},\n      _ref$noTrailing = _ref.noTrailing,\n      noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n      _ref$noLeading = _ref.noLeading,\n      noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n      _ref$debounceMode = _ref.debounceMode,\n      debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n\n\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel(options) {\n    var _ref2 = options || {},\n        _ref2$upcomingOnly = _ref2.upcomingOnly,\n        upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`\n       * and noLeading != true.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\n         * In throttle mode with noLeading, if `delay` time has\n         * been exceeded, update `lastExec` and schedule `callback`\n         * to execute after `delay` ms.\n         */\n        lastExec = Date.now();\n\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n         * `callback`.\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\n\nfunction debounce (delay, callback, options) {\n  var _ref = options || {},\n      _ref$atBegin = _ref.atBegin,\n      atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\n\nexport { debounce, throttle };\n//# sourceMappingURL=index.js.map\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nexport default function (delay, callback, options) {\n\tconst {\n\t\tnoTrailing = false,\n\t\tnoLeading = false,\n\t\tdebounceMode = undefined\n\t} = options || {};\n\t/*\n\t * After wrapper has stopped being called, this timeout ensures that\n\t * `callback` is executed at the proper times in `throttle` and `end`\n\t * debounce modes.\n\t */\n\tlet timeoutID;\n\tlet cancelled = false;\n\n\t// Keep track of the last time `callback` was executed.\n\tlet lastExec = 0;\n\n\t// Function to clear existing timeout\n\tfunction clearExistingTimeout() {\n\t\tif (timeoutID) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\t}\n\n\t// Function to cancel next exec\n\tfunction cancel(options) {\n\t\tconst { upcomingOnly = false } = options || {};\n\t\tclearExistingTimeout();\n\t\tcancelled = !upcomingOnly;\n\t}\n\n\t/*\n\t * The `wrapper` function encapsulates all of the throttling / debouncing\n\t * functionality and when executed will limit the rate at which `callback`\n\t * is executed.\n\t */\n\tfunction wrapper(...arguments_) {\n\t\tlet self = this;\n\t\tlet elapsed = Date.now() - lastExec;\n\n\t\tif (cancelled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec() {\n\t\t\tlastExec = Date.now();\n\t\t\tcallback.apply(self, arguments_);\n\t\t}\n\n\t\t/*\n\t\t * If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t * to allow future `callback` executions.\n\t\t */\n\t\tfunction clear() {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif (!noLeading && debounceMode && !timeoutID) {\n\t\t\t/*\n\t\t\t * Since `wrapper` is being called for the first time and\n\t\t\t * `debounceMode` is true (at begin), execute `callback`\n\t\t\t * and noLeading != true.\n\t\t\t */\n\t\t\texec();\n\t\t}\n\n\t\tclearExistingTimeout();\n\n\t\tif (debounceMode === undefined && elapsed > delay) {\n\t\t\tif (noLeading) {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode with noLeading, if `delay` time has\n\t\t\t\t * been exceeded, update `lastExec` and schedule `callback`\n\t\t\t\t * to execute after `delay` ms.\n\t\t\t\t */\n\t\t\t\tlastExec = Date.now();\n\t\t\t\tif (!noTrailing) {\n\t\t\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, delay);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n\t\t\t\t * `callback`.\n\t\t\t\t */\n\t\t\t\texec();\n\t\t\t}\n\t\t} else if (noTrailing !== true) {\n\t\t\t/*\n\t\t\t * In trailing throttle mode, since `delay` time has not been\n\t\t\t * exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t * recent execution.\n\t\t\t *\n\t\t\t * If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t * after `delay` ms.\n\t\t\t *\n\t\t\t * If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t * execute after `delay` ms.\n\t\t\t */\n\t\t\ttimeoutID = setTimeout(\n\t\t\t\tdebounceMode ? clear : exec,\n\t\t\t\tdebounceMode === undefined ? delay - elapsed : delay\n\t\t\t);\n\t\t}\n\t}\n\n\twrapper.cancel = cancel;\n\n\t// Return the wrapper function.\n\treturn wrapper;\n}\n","/* eslint-disable no-undefined */\n\nimport throttle from './throttle.js';\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\nexport default function (delay, callback, options) {\n\tconst { atBegin = false } = options || {};\n\treturn throttle(delay, callback, { debounceMode: atBegin !== false });\n}\n"],"names":["$945622fd0f572e60$var$form","document","querySelector","addEventListener","event","preventDefault","elements","email","message","currentTarget","$945622fd0f572e60$var$throttleFunc","feedbackFormState","value","$945622fd0f572e60$var$onSubmit","$945622fd0f572e60$var$submitBtn","lastElementChild","$945622fd0f572e60$var$checkValues","JSON","parse","localStorage","getItem","$945622fd0f572e60$var$emailInput","$945622fd0f572e60$var$messageInput","delay","callback","options","timeoutID","_ref","_ref$noTrailing","noTrailing","_ref$noLeading","noLeading","_ref$debounceMode","debounceMode","undefined","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","_len","arguments","length","arguments_","Array","_key","self","elapsed","Date","now","exec","apply","clear","setTimeout","cancel","_ref2$upcomingOnly","_ref2","upcomingOnly","num","setItem","stringify","console","log","reset","removeItem","atBegin","throttle"],"version":3,"file":"03-feedback.9bfef29e.js.map"}